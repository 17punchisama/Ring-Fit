import serial
import re

SERIAL_ENABLED = True
try:
    ser = serial.Serial("COM3", 115200, timeout=0.01)
    print("‚úÖ Connected to STM32 on COM3")
except Exception as e:
    SERIAL_ENABLED = False
    ser = None
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö STM32:", e)


def poll_serial_commands():
    """‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å STM32 ‡∏ú‡πà‡∏≤‡∏ô Serial"""
    if not SERIAL_ENABLED or ser is None:
        return []

    cmds = []
    try:
        data = ser.read(1024)
        if data:
            s = data.decode("utf-8", "ignore").replace("\r", "")
            lines = s.split("\n")

            for line in lines:
                line = line.strip()
                if not line:
                    continue

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á PAUSE / RESUME
                if "PAUSE" in line:
                    cmds.append("PAUSE")
                elif "RESUME" in line:
                    cmds.append("RESUME")

                elif line.startswith("X="):
                    try:
                        parts = line.split(",")
                        if len(parts) < 3:
                            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö X,Y,BTN ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
                            continue

                        x_val = int(parts[0].split("=")[1])
                        y_val = int(parts[1].split("=")[1])
                        btn_val = int(parts[2].split("=")[1])
                        cmds.append(
                            {"type": "JOY", "x": x_val, "y": y_val, "btn": btn_val}
                        )
                    except Exception as e:
                        print("‚ö†Ô∏è Parse error:", e, "Line:", line)

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (J, M, P, D, I, W)
                elif re.match(r"^[JMPDIW]$", line.strip(), re.IGNORECASE):
                    cmds.append(line.strip().upper())

    except Exception as e:
        print("Serial read error:", e)

    return cmds


# --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå serial_input.py ---
def send_reset_signal():
    """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'R' ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ STM32"""
    if not SERIAL_ENABLED or ser is None:
        print("‚ö†Ô∏è Serial not available for sending R.")
        return

    try:
        ser.write(b"R\n")
        ser.flush()
        print("üì§ Sent 'R' to STM32 (reset LCD)")
    except Exception as e:
        print("‚ö†Ô∏è Failed to send 'R':", e)
